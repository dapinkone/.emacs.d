* Credit: init setup forked from @PatchesPrime
* General
** Customize
   Here is one I don't understand. In what world is it a good idea to stuff
   all the customize changes into the regular init? Absolutely not happening
   in my Madagascar.

   #+BEGIN_SRC emacs-lisp
   (setq custom-file "~/.emacs.d/custom.el")
   (load custom-file 'noerror)
   #+END_SRC
** Better cursor movement
*** Avy is wonderful, and I use it to move around more than most things.
     - Keybinds
      #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "M-\\") 'avy-goto-char)
      (global-set-key (kbd "M-'") 'avy-goto-char-2)
      (global-set-key (kbd "M-)") 'avy-goto-word-0)
      #+END_SRC

*** ace-window is a simple but useful tool.
    Keybinds
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-o") 'ace-window)
    #+END_SRC


    Customize the binds for ace-window to be like avy
    #+BEGIN_SRC emacs-lisp
    (setq aw-keys '(?j ?k ?l ?\; ?m ?o ?i ?p))  
    #+END_SRC

*** expand-region
    I consider expand-region cursor movement as it removed the need for
    things like "C-e C-r ' C-SPC C-r '". Instead I can just put my cursor
    anywhere in the quotes and use expand-region to select it all.
    
    Works for code blocks too.
    #+BEGIN_SRC emacs-lisp
    (require 'expand-region)
    #+END_SRC

    - Keybinds
      #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "M-=") 'er/expand-region)
      #+END_SRC
** Window/buffer movement
*** window sizing
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-S-<left>") 'shrink-window-horizontally)
    (global-set-key (kbd "C-S-<right>") 'enlarge-window-horizontally)
    (global-set-key (kbd "C-S-<down>") 'shrink-window)
    (global-set-key (kbd "C-S-<up>") 'enlarge-window)
    #+END_SRC
    [2018-08-10]
** Themeing..theming? Colors and shit.
   I use a variety of themes that suit my fancy. I like doom-one, afternoon,
   dracula, hell even gotham is neat sometimes. Right now it's this one..

   #+BEGIN_SRC emacs-lisp
  ;; (load-theme 'wheatgrass t)
  (load-theme 'afternoon)
  (doom-themes-visual-bell-config)
   #+END_SRC

   The default font size is way to big in my opinion, so we lower it a tad.

   #+BEGIN_SRC emacs-lisp
   (set-face-attribute 'default nil :height 150)
;;   (set-frame-font "DroidSansMono")
   #+END_SRC

** Ivy ## is broken ;_;
   Ivy is everything I love about emacs. It's fast, useful, and very customizable.

   #+BEGIN_SRC emacs-lisp
   (ivy-mode 1)
   #+END_SRC

   - Useful variables.
     ivy-use-virtual-buffers adds recent files and bookmarks to the switch buffer.

     #+BEGIN_SRC emacs-lisp
     (setq ivy-use-virtual-buffers t)
     #+END_SRC

     enable-recursive-minibuffers allows minibuffer commands while IN the minibuffer.

     #+BEGIN_SRC emacs-lisp
     (setq enable-recursive-minibuffers t)
     #+END_SRC

     ivy-initial-inputs-alist adds the '^' character to the beginning of a bunch of
     commands involving the minibuffer. I don't need this. I will ask for it explicitly
     if I want it.

     #+BEGIN_SRC emacs-lisp
     (setq ivy-initial-inputs-alist nil)
     #+END_SRC

   - Keybinds
     #+BEGIN_SRC emacs-lisp
     (global-set-key "\C-s" 'swiper)
     (global-set-key (kbd "C-c C-r") 'ivy-resume)
     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     (global-set-key (kbd "<f1> f") 'counsel-describe-function)
     (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
     (global-set-key (kbd "<f1> l") 'counsel-find-library)
     (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
     (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
     (global-set-key (kbd "C-c g") 'counsel-git)
     (global-set-key (kbd "C-c j") 'counsel-git-grep)
     (global-set-key (kbd "C-c k") 'counsel-ag)
     (global-set-key (kbd "C-r") 'counsel-minibuffer-history)
     (global-set-key (kbd "M-y") 'counsel-yank-pop)
     #+END_SRC
** Org
   Use org-bullets.

   #+BEGIN_SRC emacs-lisp
   (require 'org-bullets)
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+END_SRC

   Bindings for org-mode things, like capturing/storing from anywhere.
   #+BEGIN_SRC emacs-lisp
   (global-set-key "\C-cl" 'org-store-link)
   (global-set-key "\C-ca" 'org-agenda)
   (global-set-key "\C-cc" 'org-capture)
   (global-set-key "\C-cb" 'org-iswitchb)
   #+END_SRC

   A lot more org-mode custom stuff. I don't understand all of it.
   Editing and customization due.
   #+BEGIN_SRC emacs-lisp
   (setq org-settings-file "~/.emacs.d/org-settings.el")
   (load org-settings-file 'noerror)
   #+END_SRC

** Better buffer listing with ibuffer
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-b") 'ibuffer)
   (setq ibuffer-expert t)  ;; don't ask me about everything
   (add-hook 'ibuffer-mode-hook
          '(lambda ()
             (ibuffer-auto-mode 1))) ;; auto-update ibuffer
   #+END_SRC
** Window Space
   Honestly I understand why these exist, but it's almost sinful. The whole idea
   behind using emacs for me is I don't want to have to ever touch my mouse.
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
   #+END_SRC   
** fix scrolling
   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 10000
        scroll-preserve-screen-position t)
   #+END_SRC

* Development
** Python
**** Elpy
    #+BEGIN_SRC emacs-lisp
    (elpy-enable)
    #+END_SRC
    
    I prefer python3.
    #+BEGIN_SRC emacs_lisp
    (setq elpy-rpc-python-command "python3")
    #+END_SRC


    Tell elpy where/how to run unit-tests.
    #+BEGIN_SRC emacs-lisp
      (setq elpy-test-discover-runner-command (quote ("python" "-m" "unittest")))

    #+END_SRC

   I really like pep8's column width restriction. Rust doesn't.
   This highlights any columns which are 80+ columns.
   #+BEGIN_SRC emacs-lisp
     (require 'column-enforce-mode)
     (add-hook 'python-mode-hook 'column-enforce-mode)
     (setq column-enforce-column 79)
   #+END_SRC

** Rust
   We develop in rust.

   #+BEGIN_SRC emacs-lisp
   (require 'rust-mode)
   #+END_SRC

**** Racer
     Set up the important variables around racer. 'racer' is the autocompletion
     framework for Rust.

     Start the appropriate racer modes when entering rust-mode.

     #+BEGIN_SRC emacs-lisp
     (add-hook 'rust-mode-hook #'racer-mode)
     (add-hook 'racer-mode-hook #'eldoc-mode)
     #+END_SRC

     Interface with company-mode to provide completion.

     #+BEGIN_SRC emacs-lisp
       ;; (add-hook 'racer-mode-hook #'company-mode) ;; too slow :(
       (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
       (setq company-tooltip-align-annotations t)
       (define-key rust-mode-map (kbd "C-c C-c") #'rust-compile)
       (add-hook 'rust-mode-hook (lambda ()
                                   (add-hook 'before-save-hook 'rust-format-buffer)))
     #+END_SRC
     
      syntax error highlighting for rust
      #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'rust-mode
         (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
     #+END_SRC

** C programming
   code formatting standard for C
   #+BEGIN_SRC emacs-lisp
   (setq-default c-basic-offset 4)
   (c-set-offset 'case-label '+)
   (setq c-default-style "linux" c-basic-offset 4)
   #+END_SRC

** misc programming defaults

   This helps me keep my delimiters straight when I'm going deep.
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
   (setq show-paren-mode t)
   #+END_SRC

   Cleanup whitespace on save.
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook
   (lambda ()
   (add-hook 'before-save-hook 'delete-trailing-whitespace nil t)))
   #+END_SRC

   Tabs are a sin.     
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)
   #+END_SRC

   Show indentation more visibly.
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
   (setq highlight-indent-guides-method 'column)
   #+END_SRC

   
* Git
** Magit
   I'm sure there are a lot more complicated setups for managing ones git
   repositories, but honestly default magit is pretty much all I need. I do
   have this simple hook however.

   #+BEGIN_SRC emacs-lisp
   (add-hook 'after-save-hook 'magit-after-save-refresh-status)
   #+END_SRC

   magit entry-point
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC
* Macros
  
   bind to assist with fixing indentation
   #+BEGIN_SRC emacs-lisp
     (fset 'indent-generic [tab ?\C-a ?\C-n])
     (global-set-key (kbd "<f9>") 'indent-generic)    ;;
   #+END_SRC
   
   colapse spacing
   #+BEGIN_SRC emacs-lisp
     (fset 'colapse-spacing
           "\C-[xdelete-horizontal-space\C-m ")
     (global-set-key (kbd "C-c C-SPC") 'colapse-spacing)
   #+END_SRC
   
   command to insert today's date.
   #+BEGIN_SRC emacs-lisp
     (defun insert-current-date () (interactive)
            (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))
   #+END_SRC
   
